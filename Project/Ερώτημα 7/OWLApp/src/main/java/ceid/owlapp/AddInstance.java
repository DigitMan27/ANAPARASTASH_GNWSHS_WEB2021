/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ceid.owlapp;

import com.hp.hpl.jena.datatypes.RDFDatatype;
import com.hp.hpl.jena.datatypes.xsd.XSDDatatype;
import com.hp.hpl.jena.datatypes.xsd.impl.XMLLiteralType;
import com.hp.hpl.jena.ontology.DatatypeProperty;
import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.ObjectProperty;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.rdf.model.InfModel;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.reasoner.Reasoner;
import com.hp.hpl.jena.reasoner.ValidityReport;
import com.hp.hpl.jena.util.FileManager;
import static com.hp.hpl.jena.vocabulary.XSD.integer;
import java.awt.Component;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.mindswap.pellet.KnowledgeBase;
import org.mindswap.pellet.exceptions.InconsistentOntologyException;
import org.mindswap.pellet.jena.PelletInfGraph;
import org.mindswap.pellet.jena.PelletReasonerFactory;

/**
 *
 * @author Hive
 */
public class AddInstance extends javax.swing.JFrame {

    /** Creates new form AddInstance */
    private List<OntClass> classesList;
    private final OntModel publicOwl;
    private String namespace;
    private String category;
    private String path;
    private List<JTextField> txtF = new ArrayList<JTextField>();
    OntClass cls; // klassh pou exw grapsei sto textEdit
    
    public AddInstance(List<OntClass> classesList,OntModel publicOwl,String path) {
        this.classesList = classesList;
        this.publicOwl = publicOwl;
        this.path = path;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        classesTxt = new javax.swing.JTextField();
        applyBtn = new javax.swing.JButton();
        checkTypes = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        individualNameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        name_txt = new javax.swing.JTextField();
        age_txt = new javax.swing.JTextField();
        owner_email_txt = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        vehiclePrice = new javax.swing.JTextField();
        horsePower = new javax.swing.JTextField();
        numOfSeats = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        soldVehicle = new javax.swing.JTextField();
        ownsVehicle = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        manuafacturedBy = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        hasOwner = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        soldBy = new javax.swing.JTextField();
        fuelType = new javax.swing.JComboBox<>();
        productForTransport = new javax.swing.JComboBox<>();
        owner_sex = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Instance");
        setResizable(false);

        jLabel1.setText("Type:");

        applyBtn.setText("Add");
        applyBtn.setEnabled(false);
        applyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyBtnActionPerformed(evt);
            }
        });

        checkTypes.setText("Check");
        checkTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTypesActionPerformed(evt);
            }
        });

        jLabel2.setText("Individual Name:");

        individualNameTxt.setEnabled(false);

        jLabel3.setText("Name:");

        jLabel4.setText("Age:");

        jLabel5.setText("Sex:");

        jLabel6.setText("Email:");

        name_txt.setEnabled(false);

        age_txt.setEnabled(false);

        owner_email_txt.setEnabled(false);

        jLabel8.setText("Price:");

        jLabel9.setText("Horse Power:");

        jLabel10.setText("Fuel Type:");

        jLabel7.setText("Number of Seats:");

        jLabel11.setText("Product for transport:");

        vehiclePrice.setEnabled(false);

        horsePower.setEnabled(false);

        numOfSeats.setEnabled(false);

        jLabel12.setText("Sold:");

        jLabel13.setText("Owns:");

        soldVehicle.setEnabled(false);

        ownsVehicle.setEnabled(false);

        jLabel14.setText("Manuafactured By:");

        manuafacturedBy.setEnabled(false);

        jLabel15.setText("Has Owner:");

        hasOwner.setEnabled(false);

        jLabel16.setText("Sold By:");

        soldBy.setEnabled(false);

        fuelType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oil", "Petrol", "Electrism" }));
        fuelType.setEnabled(false);

        productForTransport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Food", "Oil", "Furniture", "Cars" }));
        productForTransport.setEnabled(false);

        owner_sex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Male", "Female" }));
        owner_sex.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(numOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(vehiclePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel10)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fuelType, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(horsePower, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(applyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(individualNameTxt))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(classesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkTypes))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(10, 10, 10)
                                        .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(age_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(soldVehicle)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(owner_email_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(owner_sex, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6))
                                            .addComponent(ownsVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(manuafacturedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(94, 94, 94)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(productForTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(hasOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(soldBy)))
                                .addGap(0, 407, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkTypes))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(individualNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(age_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(owner_email_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(owner_sex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(soldVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(ownsVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(vehiclePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(horsePower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel15)
                    .addComponent(hasOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fuelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(numOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel16)
                    .addComponent(soldBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productForTransport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(manuafacturedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(applyBtn)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBtnActionPerformed

        String indName = individualNameTxt.getText();
        if(indName.length()==0){
            JOptionPane.showMessageDialog(this, "Το πεδίο κειμένου είναι άδειο");
        }else{
            if(category.equals("Vehicle")){
                Individual individual = publicOwl.createIndividual(namespace+indName,cls);
                ObjectProperty objHasOwner = publicOwl.getObjectProperty(namespace+"hasOwner");
                ObjectProperty objmanuafacturedBy = publicOwl.getObjectProperty(namespace+"manufacturedBy");
                ObjectProperty objSoldBy = publicOwl.getObjectProperty(namespace+"soldBy");
                DatatypeProperty dataName = publicOwl.getDatatypeProperty(namespace+"ModelName");
                DatatypeProperty dataAge = publicOwl.getDatatypeProperty(namespace+"ModelAge");
                DatatypeProperty dataPower = publicOwl.getDatatypeProperty(namespace+"horsePower");
                DatatypeProperty dataFuel = publicOwl.getDatatypeProperty(namespace+"fuelType");
                DatatypeProperty dataPrice = publicOwl.getDatatypeProperty(namespace+"Price");
                DatatypeProperty dataSeats = publicOwl.getDatatypeProperty(namespace+"numOfSeats");
                DatatypeProperty dataProduct = publicOwl.getDatatypeProperty(namespace+"productForTransport");
                if(name_txt.getText().length()>0){
                    System.out.println("name");
                    Literal l = publicOwl.createTypedLiteral(name_txt.getText(), "http://www.w3.org/2000/01/rdf-schema#Literal");
                    individual.addProperty(dataName,l);
                }if(age_txt.getText().length()>0){
                    System.out.println("age");
                    individual.addProperty(dataAge,publicOwl.createTypedLiteral(age_txt.getText(), XSDDatatype.XSDpositiveInteger));
                }if(manuafacturedBy.getText().length()>0){
                    System.out.println("manufact");
                    Individual country = publicOwl.getIndividual(namespace + manuafacturedBy.getText());
                    if(country==null){
                        JOptionPane.showMessageDialog(this, "Η χώρα που δίαλεξες δεν είναι καταχυρωμένη !");
                    }
                    if(country.isIndividual()){
                        individual.addProperty(objmanuafacturedBy,publicOwl.createResource(namespace+country.getLocalName()));
                    }
                }if(hasOwner.getText().length()>0){
                    System.out.println("owner");
                    Individual owner = publicOwl.getIndividual(namespace + hasOwner.getText());
                    if(owner==null) {
                        JOptionPane.showMessageDialog(this, "Ο πελάτης που δήλωσες δεν έχει καταχωρηθεί");
                    }
                    if (owner.isIndividual()) {
                        individual.addProperty(objHasOwner, publicOwl.createResource(namespace+owner.getLocalName()));
                    }
                }if(vehiclePrice.getText().length()>0){
                    System.out.println("price");
                    individual.addProperty(dataPrice,publicOwl.createTypedLiteral(vehiclePrice.getText(), XSDDatatype.XSDdouble));
                }if(numOfSeats.getText().length()>0){
                    System.out.println("seats");
                    individual.addProperty(dataSeats,publicOwl.createTypedLiteral(numOfSeats.getText(), XSDDatatype.XSDinteger));
                }if(horsePower.getText().length()>0){ 
                    System.out.println("power");
                    individual.addProperty(dataPower,publicOwl.createTypedLiteral(numOfSeats.getText(), XSDDatatype.XSDdouble));
                }if(productForTransport.getSelectedItem().equals("None")==false){
                    System.out.println("prod");
                    individual.addProperty(dataProduct, (String) productForTransport.getSelectedItem());
                }if(soldBy.getText().length()>0){
                    Individual owner1 = publicOwl.getIndividual(namespace + soldBy.getText());
                    if (owner1.isIndividual()) {
                        individual.addProperty(objSoldBy, publicOwl.createResource(namespace+owner1.getLocalName()));
                    }else if(owner1==null) {
                        JOptionPane.showMessageDialog(this, "Ο πελάτης που δήλωσες δεν έχει καταχωρηθεί");
                    }
                }
                individual.addProperty(dataFuel, (String) fuelType.getSelectedItem());
        
                try{
                    publicOwl.prepare();
                    KnowledgeBase kb = ((PelletInfGraph) publicOwl.getGraph()).getKB();
                    boolean consistent = kb.isConsistent();
                    if(consistent==false){
                        throw new InconsistentOntologyException();
                    }else{
                        FileWriter out = null;
                        try {
                            out = new FileWriter(path);
                            publicOwl.write(out, "RDF/XML");
                        } catch (IOException ex) {
                            Logger.getLogger(AddInstance.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }catch(InconsistentOntologyException e){
                    JOptionPane.showMessageDialog(this, e);
                    this.dispose();
                }
            }else if(category.equals("Country")){
                Individual individual = publicOwl.createIndividual(namespace+indName,cls);
                DatatypeProperty dataName = publicOwl.getDatatypeProperty(namespace+"CountryName");
                if (name_txt.getText().length() > 0) {
                    System.out.println("name");
                    Literal l = publicOwl.createTypedLiteral(name_txt.getText(), "http://www.w3.org/2000/01/rdf-schema#Literal");
                    individual.addProperty(dataName, l);
                }
                try {
                    publicOwl.prepare();
                    KnowledgeBase kb = ((PelletInfGraph) publicOwl.getGraph()).getKB();
                    boolean consistent = kb.isConsistent();
                    if (consistent == false) {
                        throw new InconsistentOntologyException();
                    } else {
                        FileWriter out = null;
                        try {
                            out = new FileWriter(path);
                            publicOwl.write(out, "RDF/XML");
                        } catch (IOException ex) {
                            Logger.getLogger(AddInstance.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (InconsistentOntologyException e) {
                    JOptionPane.showMessageDialog(this, e);
                    this.dispose();
                }
            }else if(category.equals("Owner")){
                Individual individual = publicOwl.createIndividual(namespace+indName,cls);
                DatatypeProperty dataName = publicOwl.getDatatypeProperty(namespace+"Name");
                DatatypeProperty dataAge = publicOwl.getDatatypeProperty(namespace+"Age");
                DatatypeProperty dataSex = publicOwl.getDatatypeProperty(namespace+"Sex");
                DatatypeProperty dataEmail = publicOwl.getDatatypeProperty(namespace+"email");
                ObjectProperty objSold = publicOwl.getObjectProperty(namespace+"sold");
                ObjectProperty objowns = publicOwl.getObjectProperty(namespace+"owns");
                if(name_txt.getText().length() > 0){
                    Literal l = publicOwl.createTypedLiteral(name_txt.getText(), "http://www.w3.org/2000/01/rdf-schema#Literal");
                    individual.addProperty(dataName, l);
                }if(age_txt.getText().length() > 0){
                    individual.addProperty(dataAge,publicOwl.createTypedLiteral(age_txt.getText(), XSDDatatype.XSDpositiveInteger));
                }if(owner_email_txt.getText().length() > 0){
                    Literal l = publicOwl.createTypedLiteral(owner_email_txt.getText(), "http://www.w3.org/2000/01/rdf-schema#Literal");
                    individual.addProperty(dataEmail, l);
                }if(soldVehicle.getText().length() > 0){
                    if(soldVehicle.getText().contains(",")){
                        String[] data = soldVehicle.getText().split(",");
                        List<Individual> list = new ArrayList<Individual>();
                        for(String d: data){
                            Individual ind = publicOwl.getIndividual(namespace + d);
                            if(ind.isIndividual()){
                                list.add(ind);
                            }
                            if(ind==null){
                                JOptionPane.showMessageDialog(this, "Το "+d+" δεν είναι στιγμιότυπο .");
                                return ;
                            }
                        }
                        for(Individual ind: list){
                            individual.addProperty(objSold, publicOwl.createResource(namespace+ind.getLocalName()));
                        }
                    }else{
                        Individual ind = publicOwl.getIndividual(namespace + soldVehicle.getText());
                        if(ind==null) {
                            JOptionPane.showMessageDialog(this, "Το όχημα που δήλωσες δεν έχει καταχωρηθεί");
                        }
                        if(ind.isIndividual()){
                            individual.addProperty(objSold, publicOwl.createResource(namespace+ind.getLocalName()));
                        }
                    }
                }if(ownsVehicle.getText().length() > 0){
                    if(ownsVehicle.getText().contains(",")){
                        String[] data = ownsVehicle.getText().split(",");
                        List<Individual> list = new ArrayList<Individual>();
                        for(String d: data){
                            Individual ind = publicOwl.getIndividual(namespace + d);
                            if(ind.isIndividual()){
                                list.add(ind);
                            }
                            if(ind==null){
                                JOptionPane.showMessageDialog(this, "Το "+d+" δεν είναι στιγμιότυπο .");
                                return ;
                            }
                        }
                        for(Individual ind: list){
                            individual.addProperty(objowns, publicOwl.createResource(namespace+ind.getLocalName()));
                        }
                    }else{
                        Individual ind = publicOwl.getIndividual(namespace + ownsVehicle.getText());
                        if(ind==null){
                            //System.out.println("Null");
                            JOptionPane.showMessageDialog(this, "Το όχημα που δήλωσες δεν έχει καταχωρηθεί");
                            //return ;
                        }
                        if(ind.isIndividual()){
                            individual.addProperty(objowns, publicOwl.createResource(namespace+ind.getLocalName()));
                        }
                    }
                }
                if(owner_sex.getSelectedItem().toString()!="None"){
                    individual.addProperty(dataSex, (String) owner_sex.getSelectedItem());
                }
                try {
                    publicOwl.prepare();
                    KnowledgeBase kb = ((PelletInfGraph) publicOwl.getGraph()).getKB();
                    boolean consistent = kb.isConsistent();
                    if (consistent == false) {
                        throw new InconsistentOntologyException();
                    } else {
                        FileWriter out = null;
                        try {
                            out = new FileWriter(path);
                            publicOwl.write(out, "RDF/XML");
                        } catch (IOException ex) {
                            Logger.getLogger(AddInstance.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (InconsistentOntologyException e) {
                    JOptionPane.showMessageDialog(this, e);
                    this.dispose();
                }
            }
            checkTypes.setEnabled(true);
            category = null;
            applyBtn.setEnabled(false);
        }
        
    }//GEN-LAST:event_applyBtnActionPerformed

    private void checkTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTypesActionPerformed
        String txt = classesTxt.getText();
        namespace = classesList.get(0).getNameSpace();
        Boolean flag = false;
        if(txt.length()==0){
            JOptionPane.showMessageDialog(this, "Το πεδίο κειμένου είναι άδειο");
        }else{
            for(OntClass c: classesList){   
                String name = c.getLocalName();
                if(this.checkString(name,txt)){
                    System.out.println("Correct class\1");
                    cls = c;
                    flag = true;
                    break;
                }
            }
            if(flag==false){
                JOptionPane.showMessageDialog(this, "Εισαγες λάθος κλάση!");
            }
        }
        if(flag){
            individualNameTxt.setEnabled(true);
            OntClass superclass = publicOwl.getOntClass(namespace+"Vehicle");
            OntClass Pesronsuperclass = publicOwl.getOntClass(namespace+"Owner");
            if(cls.hasSuperClass(superclass) || cls.getLocalName().equals("Vehicle") || cls.getLocalName().equals("dirt") || cls.getLocalName().equals("road")){
                name_txt.setEnabled(true);
                age_txt.setEnabled(true);
                manuafacturedBy.setEnabled(true);
                fuelType.setEnabled(true);
                hasOwner.setEnabled(true);
                horsePower.setEnabled(true);
                vehiclePrice.setEnabled(true);
                soldBy.setEnabled(true);
                numOfSeats.setEnabled(true);
                productForTransport.setEnabled(true);
                category = "Vehicle";
            }else if(cls.getLocalName().equals("Country")){
                name_txt.setEnabled(true);
                category = "Country";
            }else if(cls.hasSuperClass(Pesronsuperclass) || cls.getLocalName().equals("Owner")){
                name_txt.setEnabled(true);
                owner_email_txt.setEnabled(true);
                owner_sex.setEnabled(true);
                age_txt.setEnabled(true);
                soldVehicle.setEnabled(true);
                ownsVehicle.setEnabled(true);
                category = "Owner";
            }
            applyBtn.setEnabled(true);
            checkTypes.setEnabled(false);
        }
    }//GEN-LAST:event_checkTypesActionPerformed
    
    private Boolean checkString(String str1,String str2){
        String upperArr[] = {str1.toUpperCase(),str2.toUpperCase()};
        String lowArr[] = {str1.toLowerCase(),str2.toLowerCase()};
        if(upperArr[0].equals(upperArr[1]) || lowArr[0].equals(lowArr[1]))
            return true;
        return false;
    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField age_txt;
    private javax.swing.JButton applyBtn;
    private javax.swing.JButton checkTypes;
    private javax.swing.JTextField classesTxt;
    private javax.swing.JComboBox<String> fuelType;
    private javax.swing.JTextField hasOwner;
    private javax.swing.JTextField horsePower;
    private javax.swing.JTextField individualNameTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField manuafacturedBy;
    private javax.swing.JTextField name_txt;
    private javax.swing.JTextField numOfSeats;
    private javax.swing.JTextField owner_email_txt;
    private javax.swing.JComboBox<String> owner_sex;
    private javax.swing.JTextField ownsVehicle;
    private javax.swing.JComboBox<String> productForTransport;
    private javax.swing.JTextField soldBy;
    private javax.swing.JTextField soldVehicle;
    private javax.swing.JTextField vehiclePrice;
    // End of variables declaration//GEN-END:variables

}
