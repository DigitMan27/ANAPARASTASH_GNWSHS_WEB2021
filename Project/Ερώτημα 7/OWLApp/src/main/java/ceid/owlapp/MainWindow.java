/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ceid.owlapp;



import com.hp.hpl.jena.ontology.Individual;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.mindswap.pellet.jena.PelletReasonerFactory;

import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntProperty;
import com.hp.hpl.jena.ontology.OntResource;
import com.hp.hpl.jena.rdf.model.InfModel;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.reasoner.Reasoner;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Hive
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private File owlFile;
    private String path;
    
    Map<String,List<Individual>> indPerClass = new HashMap<String,List<Individual>>();
    List<OntClass> classesList = new  ArrayList<OntClass>(); 
    
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        loadOWL = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        filePathLabel = new javax.swing.JLabel();
        classesTable = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        addInstance = new javax.swing.JButton();
        showInstances = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OWL");
        setResizable(false);

        loadOWL.setText("Open OWL");
        loadOWL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadOWLMouseClicked(evt);
            }
        });

        exit.setText("Exit");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });

        filePathLabel.setText("...");

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Classes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.getTableHeader().setReorderingAllowed(false);
        classesTable.setViewportView(dataTable);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setResizable(false);
        }

        addInstance.setText("Add");
        addInstance.setEnabled(false);
        addInstance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addInstanceMouseClicked(evt);
            }
        });

        showInstances.setText("Show Instances");
        showInstances.setEnabled(false);
        showInstances.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showInstancesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classesTable, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadOWL, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addInstance, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(showInstances)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classesTable, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadOWL)
                    .addComponent(exit)
                    .addComponent(addInstance)
                    .addComponent(showInstances))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadOWLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadOWLMouseClicked

        FileFilter filter = new FileNameExtensionFilter("OWL file", "owl");
        jFileChooser.addChoosableFileFilter(filter);
        jFileChooser.setFileFilter(filter);
        DefaultTableModel tableModel =(DefaultTableModel) dataTable.getModel();
        dataTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            owlFile = jFileChooser.getSelectedFile();
            path = owlFile.getAbsolutePath();
            InputStream in = FileManager.get().open(path);
            InputStreamReader rin = new InputStreamReader(in,Charset.forName("UTF-8").newDecoder());
            filePathLabel.setText(path);
            final OntModel model = ModelFactory.createOntologyModel(PelletReasonerFactory.THE_SPEC); // allagh sto bus : eisagwgh max orious ston ari8mo twn 8eswn mexri 1000
            model.read(rin,null);
            System.out.println("Ontology loaded!!");
            
            for (ExtendedIterator<OntClass> i =  model.listNamedClasses(); i.hasNext();) {
                OntClass ontClass = i.next();
                if("Thing".equals(ontClass.getLocalName()) || "Nothing".equals(ontClass.getLocalName())){
                    //System.out.println("Thing!!!!!");
                    continue;
                }
                List<Individual> instances = new  ArrayList<Individual>();
               // logger.debug("Base class = " + ontClass);
                System.out.println(ontClass.toString());
                classesList.add(ontClass);
                tableModel.addRow(new Object[]{ontClass});
                ExtendedIterator<? extends OntResource> inst = ontClass.listInstances();
                while(inst.hasNext()){
                    Individual instance = (Individual) inst.next();
                    instances.add(instance);
                    //System.out.println(instance.toString());
                }
                indPerClass.put(ontClass.toString(),instances);
            }
            System.out.println("END");
            addInstance.setEnabled(true);
            showInstances.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_loadOWLMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        this.dispose();
    }//GEN-LAST:event_exitMouseClicked
/*
    int row = dataTable.getSelectedRow();
        Object owl_class_at_table = dataTable.getValueAt(row, 0);
        
        String owl_class = classesList.get(row).toString();
        //System.out.println("Class:" + owl_class);
        //System.out.println("Class:" + hm.get(owl_class));
        InstanceTable it = new InstanceTable();
        it.addToTable(owl_class,indPerClass.get(owl_class));
        it.setVisible(true);*/
    private void addInstanceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addInstanceMouseClicked
        int row = dataTable.getSelectedRow();
        OntClass c = classesList.get(row);
        ExtendedIterator<OntClass> cc = c.listSuperClasses();
        int size=0;
        while (cc.hasNext()){ 
            OntClass ontClass = cc.next();
            if(ontClass!=null)
                size++; 
            else break;
        }
        if(size==1){
            OntClass ontClass = cc.next();
            System.out.println(ontClass.toString());
        }else{
            while(cc.hasNext()){
                OntClass ontClass = cc.next();
                System.out.println(ontClass.toString());
            }
        }
    }//GEN-LAST:event_addInstanceMouseClicked

    private void showInstancesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showInstancesMouseClicked
        int row = dataTable.getSelectedRow();
        String owl_class = classesList.get(row).toString();
        InstanceTable it = new InstanceTable();
        it.addToTable(owl_class,indPerClass.get(owl_class));
        it.setVisible(true);
    }//GEN-LAST:event_showInstancesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addInstance;
    private javax.swing.JScrollPane classesTable;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton exit;
    private javax.swing.JLabel filePathLabel;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JButton loadOWL;
    private javax.swing.JButton showInstances;
    // End of variables declaration//GEN-END:variables
}
